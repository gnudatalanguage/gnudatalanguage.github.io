# Known issues
- Did you use the` --recursive` while cloning gdl ? Otherwise it will not compile.

- GDL now uses by default the wxWidgets engine for all graphics, plot windows and widgets. You can optionally use the X11 driver (for PLOTS only), first by enabling X11 during the compilation (`cmake ... -DX11=ON ...`)  then by calling GDL with the `-X` flag or setting the env. var `GDL_DISABLE_WX_PLOTS`. X11 is not available under Windows.

There are still issues with the wxWidgets engine under Linux, that you may encounter:
  - wxWidgets (using GTK) do not function well with fvwm2 (window positioning mainly). However see [here.](https://github.com/gnudatalanguage/gdl/issues/1759#issuecomment-1971806239)
  - `DEVICE,SET_GRAPHICS_FUNCTION=x` will not work correctly due to the absence of those basic graphic functions in the PANGO library, and in consequence in the in wxWidgets3.x. Some utilities (Graffer, Look) use this command to draw crosshairs on plots, and this PANGO 'feature' prevents crosshair lines to be properly erased, making a mess of the plot. It is advised for the time being to remove the crosshair generation directly by editing the procedure and commenting the relevant code lines. There are terribly few cases where the basic pointer does not suffice. For procedures that use `DEVICE,SET_GRAPHICS_FUNCTION` on PLOT windows (such as BOX_CURSOR) just use the X11 driver for plots as described above. 
  - If you experience a slowness in plots (like `SURFACE,dist(64)` taking minutes to plot!) , it is because your installation prevents GDL to use its "own" version of plplot's drivers. There will be a message at the start of GDL: `Local drivers not found --- using default ones.` . 

  - Misshaped Hershey Fonts in PostScript device: this is a plplot bug, however see this [workaround](https://github.com/gnudatalanguage/gdl/pull/1022#issuecomment-1614428386)

- gcc 13 (and perhaps other compiler) may report "multiply defined" error messages at link time and refuse to link: add `-DSPLIT_SOURCES_FILES=OFF` to the `cmake` command to solve this. Of course this means you cannot rely totally on the build_gdl.sh command file to build gdl. Instead, go to the gdl/build folder, type `cmake -DSPLIT_SOURCES_FILES=OFF ..`, then go back to the home directory and re-type `gdl/src/build_gdl.sh build`.  

Older issues, not sure if they still hold:

- In presence of Anaconda (a python installer) there may be some troubles compiling GDL, see [here](https://github.com/gnudatalanguage/gdl/issues/780#issuecomment-642943543)

- old GCC. It is still possible to compile GDL 1.0 versions (rc1, rc2, rc3) with old GC 4.8 versions (e.g. gcc version 4.8.4 (Ubuntu 4.8.4-2ubuntu1~14.04.4)  but _make check_ show that some numerical functions misbehave. 
